[{"/Users/delphine/Documents/Sandbox/McHacks/CaringToDo/caring-todos/client/src/index.tsx":"1","/Users/delphine/Documents/Sandbox/McHacks/CaringToDo/caring-todos/client/src/reportWebVitals.ts":"2","/Users/delphine/Documents/Sandbox/McHacks/CaringToDo/caring-todos/client/src/App.tsx":"3","/Users/delphine/Documents/Sandbox/McHacks/CaringToDo/caring-todos/client/src/Login.tsx":"4","/Users/delphine/Documents/Sandbox/McHacks/CaringToDo/caring-todos/client/src/Dashboard.tsx":"5"},{"size":949,"mtime":1612038436912,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1612034402502,"results":"8","hashOfConfig":"7"},{"size":1169,"mtime":1612039204839,"results":"9","hashOfConfig":"7"},{"size":1932,"mtime":1612034402502,"results":"10","hashOfConfig":"7"},{"size":6449,"mtime":1612039204847,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hcwa6w",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/delphine/Documents/Sandbox/McHacks/CaringToDo/caring-todos/client/src/index.tsx",[],"/Users/delphine/Documents/Sandbox/McHacks/CaringToDo/caring-todos/client/src/reportWebVitals.ts",[],"/Users/delphine/Documents/Sandbox/McHacks/CaringToDo/caring-todos/client/src/App.tsx",[],"/Users/delphine/Documents/Sandbox/McHacks/CaringToDo/caring-todos/client/src/Login.tsx",[],"/Users/delphine/Documents/Sandbox/McHacks/CaringToDo/caring-todos/client/src/Dashboard.tsx",["23"],"import React, { useState, useEffect } from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport { Todo } from './models'; \n\nimport Calendar from 'react-datepicker';\nimport Clock from 'react-clock';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'react-clock/dist/Clock.css';\n\nimport './styles/Titles.css';\nimport './styles/Boxes.css';\nimport './styles/Buttons.css';\nimport './styles/Tabs.css';\nimport './styles/calendar-clock.css';\n\nconst CREATE_TODO = gql`\n    mutation CreateTodo($userEmail: String!, $title: String!, $description: String, $category: String) {\n        createTodo(userEmail: $userEmail, title: $title, description: $description, category: $category) {\n            _id\n            title\n            description\n            category\n            completed\n        }\n    }\n`;\n\nconst TOGGLE_TODO = gql`\n    mutation ToggleTodo($todoId: ID!, $completed: Boolean!) {\n        toggleTodo(todoId: $todoId, completed: $completed) {\n            _id\n            title\n            description\n            category\n            completed\n        }\n    }\n`;\n\ntype Props = {\n    email: string;\n    allTodos: Todo[];\n    onAddTodo: (todo: Todo) => void;\n    onTodoToggle: (todo: Todo) => void;\n}\n\nconst todoCategories = [\n    { value: 'WORK', displayText: 'Work' },\n    { value: 'SCHOOL', displayText: 'School' },\n    { value: 'FAM-FRIENDS', displayText: 'Family and Friends' },\n    { value: 'SELF-CARE', displayText: 'Self-care' }\n];\n\nconst randomFactor = Math.random();\nconst randomIndex = Math.floor(1643*randomFactor);\n\nconst Dashboard = (props: Props) => {\n    // Fields for creating a todo\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [category, setCategory] = useState('WORK');\n\n    const [createTodo] = useMutation(CREATE_TODO, {\n        onCompleted: ({ createTodo }) => {\n            props.onAddTodo(createTodo);\n        }\n    });\n\n    const handleTodoSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        createTodo({ \n            variables: { userEmail: props.email, title, description, category } \n        });\n    }\n\n    // Toggle a todo\n    const [toggleTodo] = useMutation(TOGGLE_TODO, {\n        onCompleted: ({ toggleTodo }) => {\n            props.onTodoToggle(toggleTodo);\n        }\n    });\n\n    // Fetch random quote\n    const [quote, setQuote] = useState('')\n    const [author, setAuthor] = useState('')\n    useEffect(() => {\n      fetch(\"https://type.fit/api/quotes\")\n      .then(function(response) {\n        return response.json();\n      })\n      .then((data) => {\n        setQuote(data[randomIndex].text)\n        setAuthor(data[randomIndex].author || 'Anonymous')\n      })\n    }, []);\n  \n    // To filter the todo list\n    const [tab, setTab] = useState('WORK');\n\n    return (\n        <div className=\"app-container\">\n            <div className=\"calendar\">\n                <Calendar\n                readOnly\n                inline\n                disabled\n                onChange={() => {}}\n                selected={new Date()}/>\n                <Clock value={new Date()}/>\n            </div>\n          <div className=\"MainBox\">\n\n            <h1 className=\"MainTitle\">\"{quote}\" by {author}</h1>\n\n            <div className=\"flex-container\">\n            <div className=\"flex-child magenta\">\n            <div className=\"Box\">\n                <h3 className=\"SubTitle\">Create a New Task</h3>\n                <form onSubmit={handleTodoSubmit}>\n                    <label htmlFor=\"todoTitle\" className=\"Paragraph\">Title: </label>\n                    <input className=\"TextBox\"\n                    id=\"todoTitle\"\n                    type=\"text\" \n                    name=\"title\"\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}/>\n                    <label htmlFor=\"todoDescription\" className=\"Paragraph\">\n                        Description: \n                    </label>\n                    <input className=\"TextBox\"\n                    id=\"todoDescription\"\n                    type=\"text\" \n                    name=\"description\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}/>\n                    <select className=\"TextBox\"\n                    name=\"category\"\n                    value={category}\n                    onChange={e => setCategory(e.target.value)}>\n                        {todoCategories.map(({ value, displayText }) => (\n                            <option \n                            key={value} \n                            value={value}>\n                                {displayText}\n                            </option>\n                        ))}\n                    </select>\n                    <button type=\"submit\" className=\"Button\">\n                        Submit\n                    </button>\n                </form>\n                <h3 className=\"SubTitle\">Task List</h3>\n                <div className=\"tab\">\n                    {todoCategories.map(({ value, displayText }) => (\n                        <button \n                        key={value} \n                        className=\"tablinks\"\n                        onClick={() => setTab(value)}>\n                            {displayText}\n                        </button>\n                    ))}\n                </div>\n                <div className=\"TaskBox\">\n                    {props.allTodos.filter(({ category }) => category === tab).map((todo) => (\n                        <div key={todo._id} className=\"Task\">\n                            <input \n                            type=\"checkbox\" \n                            checked={todo.completed}\n                            onChange={(e) => toggleTodo({\n                                variables: { \n                                    todoId: todo._id, \n                                    completed: e.target.checked \n                                }\n                            })}/>\n                            <span className=\"Paragraph\">\n                                {todo.title}: {todo.description}\n                            </span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <div className=\"RecipeBox\">\n                <h3 className=\"SubTitle\"> Try one of these recipes! </h3>\n            </div>\n        </div>\n        </div>\n        </div>\n        </div>\n  );\n}\n\nexport default Dashboard;\n",{"ruleId":"24","severity":1,"message":"25","line":50,"column":24,"nodeType":"26","messageId":"27","endLine":50,"endColumn":25},"@typescript-eslint/no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar"]